// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum SKU {
  GRAMS
  KGS
}

enum  SeedType {
  TYPE_A
  TYPE_B
  TYPE_C 
}

model User {
  id  Int    @id @default(autoincrement())
  uuid   String  @default(uuid())  @unique
  email  String?  @unique
  first_name  String
  last_name  String
  phone_number  String?
  role  Role   @default(USER)
  is_active  Boolean @default(true)
  password  String

  orders  Order[] // a user can place multiple orders
  
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Seed {
  id  Int     @id @default(autoincrement())
  uuid   String  @default(uuid())  @unique
  type String
  name String
  description String?
  price Int @default(0)
  stock Int  @default(0)
  sku SKU @default(KGS)

  orders  Order[]  // seeds that have been ordered

  created_at  DateTime @default(now())
  update_at  DateTime @updatedAt
}

model Order {
  id  Int     @id @default(autoincrement())
  uuid   String  @default(uuid())  @unique
  user_id String
  seed_id String
  quantity Float
  status String @default("pending")  // pending, processing, failed, cancelled, completed
  collection_date DateTime

  user User @relation(fields: [user_id], references: [uuid])
  seed Seed @relation(fields: [seed_id], references: [uuid])
  transaction Transaction?  // order is linked to a transaction

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Transaction {
  id  Int     @id @default(autoincrement())
  uuid   String  @default(uuid())  @unique
  order_id String @unique
  status String @default("processing")  // processing, failed, completed
  amount Float

  order Order @relation(fields: [order_id], references: [uuid])

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}
